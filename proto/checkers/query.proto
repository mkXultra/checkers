syntax = "proto3";
package mkXultra.checkers.checkers;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "checkers/next_game.proto";
import "checkers/stored_game.proto";
import "checkers/player_info.proto";
import "checkers/leaderboard.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";

option go_package = "github.com/mkXultra/checkers/x/checkers/types";

// Query defines the gRPC querier service.
service Query {
    // Queries a nextGame by index.
	rpc NextGame(QueryGetNextGameRequest) returns (QueryGetNextGameResponse) {
		option (google.api.http).get = "/mkXultra/checkers/checkers/nextGame";
	}
// Queries a storedGame by index.
	rpc StoredGame(QueryGetStoredGameRequest) returns (QueryGetStoredGameResponse) {
		option (google.api.http).get = "/mkXultra/checkers/checkers/storedGame/{index}";
	}

	// Queries a list of storedGame items.
	rpc StoredGameAll(QueryAllStoredGameRequest) returns (QueryAllStoredGameResponse) {
		option (google.api.http).get = "/mkXultra/checkers/checkers/storedGame";
	}

// Queries a list of canPlayMove items.
	rpc CanPlayMove(QueryCanPlayMoveRequest) returns (QueryCanPlayMoveResponse) {
		option (google.api.http).get = "/mkXultra/checkers/checkers/canPlayMove";
	}

// Queries a playerInfo by index.
	rpc PlayerInfo(QueryGetPlayerInfoRequest) returns (QueryGetPlayerInfoResponse) {
		option (google.api.http).get = "/mkXultra/checkers/checkers/playerInfo/{index}";
	}

	// Queries a list of playerInfo items.
	rpc PlayerInfoAll(QueryAllPlayerInfoRequest) returns (QueryAllPlayerInfoResponse) {
		option (google.api.http).get = "/mkXultra/checkers/checkers/playerInfo";
	}

// Queries a leaderboard by index.
	rpc Leaderboard(QueryGetLeaderboardRequest) returns (QueryGetLeaderboardResponse) {
		option (google.api.http).get = "/mkXultra/checkers/checkers/leaderboard";
	}
// this line is used by starport scaffolding # 2
}

message QueryGetNextGameRequest {}

message QueryGetNextGameResponse {
	NextGame NextGame = 1 [(gogoproto.nullable) = false];
}
message QueryGetStoredGameRequest {
	  string index = 1;

}

message QueryGetStoredGameResponse {
	StoredGame storedGame = 1 [(gogoproto.nullable) = false];
}

message QueryAllStoredGameRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStoredGameResponse {
	repeated StoredGame storedGame = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCanPlayMoveRequest {
  string idValue = 1;
  string player = 2;
  uint64 fromX = 3;
  uint64 fromY = 4;
  uint64 toX = 5;
  uint64 toY = 6;
}

message QueryCanPlayMoveResponse {
  bool possible = 1;
  string reason = 2;
}

message QueryGetPlayerInfoRequest {
	  string index = 1;

}

message QueryGetPlayerInfoResponse {
	PlayerInfo playerInfo = 1 [(gogoproto.nullable) = false];
}

message QueryAllPlayerInfoRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPlayerInfoResponse {
	repeated PlayerInfo playerInfo = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLeaderboardRequest {}

message QueryGetLeaderboardResponse {
	Leaderboard Leaderboard = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
